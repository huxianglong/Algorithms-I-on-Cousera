import java.util.Arrays;
import java.util.ArrayList;

public class BruteCollinearPoints {
	private LineSegment[] s;
	int n;
	/*  At first, I tried to use s to directly add elements, yet it turned out to be implausible.
	 *  Since the size of the array cannot be speccified, however, it seems that it could be done
	 *  by the ArrayList type, thanks to the help from the precedents' code.
	 * 
	 */
   	public BruteCollinearPoints(Point[] points) {
   		ArrayList<LineSegment> container = new ArrayList<LineSegment>(); //  use this ArrayList to store the information.
   		int N = points.length;
   		for (int i = 0; i < N; i++)
   			for (int j = i + 1; j < N; j++)
   				for (int k = j + 1; k < N; k++) {
   					if (!isCollinear(points[i], points[j], points[k])) continue;
   					for (int l = k + 1; l < N; l++)
   						if (isCollinear(points[i], points[j], points[l])) {
   							Point[] p = new Point{points[i], points[j], points[k], points[l]};
   							if (isStartPoint(p)) 
   								container.add(new LineSegment(p[0], p[3]))
   						}
   				}
   }
	
	private boolean isCollinear(Point p1, Point p2, Point p3) {
		double slope_1 = p1.slopeTo(p2);
		double slope_2 = p1.slopeTo(p3);
		if (Double.compare(slope_1, slope_2) != 0) return false;
		else return true;
	}

	private boolean isStartPoint(Point[] p) {
		Point[] q = new Point[4];
		q = p.clone();
		Arrays.sort(p);
		return p[0] == q[0];
	}
	
   public           int numberOfSegments() {
   	return n;
   }
   public LineSegment[] segments() {
   	return s; 
   }
}