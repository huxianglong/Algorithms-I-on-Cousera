import Deque.Node;

/**
 * 
 */

/**
 * @author huxianglong
 *
 * This package is implemented to realized a queue that  
 * the item removed is chosen uniformly at random from items in the data structure. 
 * 
 * Linked lists cannot be use to implement this method, as it's hard to generate a 
 * random number and extract it from the list in constant amortized time. So resized 
 * arrays have to be used.
 * 
 */
public class RandomizedQueue<Item> implements Iterable<Item> {
	private Item[] s; 
	private int N;
	
   public RandomizedQueue()                 // construct an empty randomized queue
   {  s = new item[1] ;  }
   
   public boolean isEmpty()                 // is the queue empty?
   {  return s[0] == 0;  }
   
   public int size()                        // return the number of items on the queue
   {  return N;  }
   
   public void enqueue(Item item)           // add the item
   {
		if (item == null) throw new java.lang.NullPointerException();
		if ( N == s.length) resize(2*s.length);
		if ( N > 0 && N == s.length/4) resize(s.length/2);
		s[N++] = item;
   }
   
   private void resize(int capacity)
   {
	   Item[] copy = new Item[capacity];
	   for (int i = 0; i < N; i++)
		   copy[i] = s[i];
	   s = copy;
   }
   public Item dequeue()                    // remove and return a random item
   public Item sample()                     // return (but do not remove) a random item
   public Iterator<Item> iterator()         // return an independent iterator over items in random order
   public static void main(String[] args)   // unit testing (optional)
}
