

public class Percolation 
{
	private int count;							  // The counter of open sites
	private int[][] gridState;
	private int n;
	private WeightedQuickUnionUF grid;
	// Create n-by-n grid, with all sites blocked.
    public Percolation(int n)                
    {   
    	//Notice that gridState is different from grid!!
    	this.n = n;
    	int[][] gridState = new int[n][n];	     // 0 means blocked, 1 means open.
    	// Initialization.
     	// The first n^2-1 is the grid, the n^2 is the virtual top root, the n^2+1 is the bottom one.
     	WeightedQuickUnionUF grid = new WeightedQuickUnionUF(n^2 - 1 + 2); 
    }

    // open site (row, col) if it is not open already
    public void open(int row, int col)       
    {
    	gridState[row][col] = 1;
    	count++;
    	// Union the surrounding grids when open it.
    	// Consider the upper grid
    	if (row-1 >= 0)
    	{ if (isOpen(row - 1, col))  grid.union(row + col, row + col - n);}   
    	// If in the first row   
    	else
    	{ grid.union(n^2, row + col);}
    	// Consider the lower grid
    	if (row+1 <= n-1)
    	{ if (isOpen(row + 1, col))  grid.union(row + col, row + col + n);}   
    	// If in the last row   
    	else
    	{ grid.union(n^2 + 1, row + col);}
    	// Consider the left grid
    	if ((col-1 >= 0) && (isOpen(row, col - 1)))   { grid.union(row + col, row + col - 1);}
    	// Consider the right grid
    	if ((col+1 <= n-1) && (isOpen(row, col + 1))) { grid.union(row + col, row + col + 1);}
    }

	// is site (row, col) open?
    public boolean isOpen(int row, int col)  
    { return gridState[row][col] == 1;}

    // is site (row, col) full?
    public boolean isFull(int row, int col)  
    { return grid.connected(row + col, n^2);}

    // number of open sites
    public int numberOfOpenSites()       
    { return count;}

    // does the system percolate?
    public boolean percolates()   
    { return grid.connected(n^2, n^2 + 1);}
    
     // test client (optional)
    public static void main(String[] args)   
    {
    	StdOut.println();
    }
}





